/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './autocomplete.component';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/forms/src/directives/default_value_accessor';
import * as import12 from '@angular/forms/src/directives/validators';
import * as import13 from '@angular/forms/src/directives/ng_model';
import * as import14 from '@angular/forms/src/directives/ng_control_status';
import * as import15 from '@angular/common/src/directives/ng_if';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '@angular/forms/src/validators';
import * as import18 from '@angular/forms/src/directives/control_value_accessor';
import * as import19 from '@angular/forms/src/directives/ng_control';
import * as import20 from '@angular/common/src/directives/ng_for';
import * as import21 from '@angular/core/src/change_detection/differs/iterable_differs';
var renderType_AutoCompleteComponent_Host:import0.RenderComponentType = (null as any);
class _View_AutoCompleteComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _AutoCompleteComponent_0_4:import3.AutoCompleteComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_AutoCompleteComponent_Host0,renderType_AutoCompleteComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('app-autocomplete',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AutoCompleteComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._AutoCompleteComponent_0_4 = new import3.AutoCompleteComponent(new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._AutoCompleteComponent_0_4,[],compView_0);
    compView_0.create(this._AutoCompleteComponent_0_4,this.projectableNodes,(null as any));
    var disposable_0:Function = this.renderer.listenGlobal('document','click',this.eventHandler(this._handle_click_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'keydown',this.eventHandler(this._handle_keydown_0_1.bind(this)));
    this.init([].concat([this._el_0]),[this._el_0],[
      disposable_0,
      disposable_1
    ]
    ,[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.AutoCompleteComponent) && (0 === requestNodeIndex))) { return this._AutoCompleteComponent_0_4; }
    return notFoundResult;
  }
  private _handle_click_0_0($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._AutoCompleteComponent_0_4.handleClick($event)) !== false);
    return (true && pd_0);
  }
  private _handle_keydown_0_1($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._AutoCompleteComponent_0_4.handleKeyDown($event)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_AutoCompleteComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_AutoCompleteComponent_Host === (null as any))) { (renderType_AutoCompleteComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_AutoCompleteComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const AutoCompleteComponentNgFactory:import10.ComponentFactory<import3.AutoCompleteComponent> = new import10.ComponentFactory<import3.AutoCompleteComponent>('app-autocomplete',viewFactory_AutoCompleteComponent_Host0,import3.AutoCompleteComponent);
const styles_AutoCompleteComponent:any[] = [];
var renderType_AutoCompleteComponent:import0.RenderComponentType = (null as any);
class _View_AutoCompleteComponent0 extends import1.AppView<import3.AutoCompleteComponent> {
  _el_0:any;
  _DefaultValueAccessor_0_3:import11.DefaultValueAccessor;
  _RequiredValidator_0_4:import12.RequiredValidator;
  _MinLengthValidator_0_5:import12.MinLengthValidator;
  _MaxLengthValidator_0_6:import12.MaxLengthValidator;
  _NG_VALIDATORS_0_7:any[];
  _NG_VALUE_ACCESSOR_0_8:any[];
  _NgModel_0_9:import13.NgModel;
  _NgControl_0_10:any;
  _NgControlStatus_0_11:import14.NgControlStatus;
  _text_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _appEl_3:import2.AppElement;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import15.NgIf;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_AutoCompleteComponent0,renderType_AutoCompleteComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'input',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','form-control input-list');
    this.renderer.setElementAttribute(this._el_0,'type','text');
    this._DefaultValueAccessor_0_3 = new import11.DefaultValueAccessor(this.renderer,new import8.ElementRef(this._el_0));
    this._RequiredValidator_0_4 = new import12.RequiredValidator();
    this._MinLengthValidator_0_5 = new import12.MinLengthValidator();
    this._MaxLengthValidator_0_6 = new import12.MaxLengthValidator();
    this._NG_VALIDATORS_0_7 = [
      this._RequiredValidator_0_4,
      this._MinLengthValidator_0_5,
      this._MaxLengthValidator_0_6
    ]
    ;
    this._NG_VALUE_ACCESSOR_0_8 = [this._DefaultValueAccessor_0_3];
    this._NgModel_0_9 = new import13.NgModel((null as any),this._NG_VALIDATORS_0_7,(null as any),this._NG_VALUE_ACCESSOR_0_8);
    this._NgControl_0_10 = this._NgModel_0_9;
    this._NgControlStatus_0_11 = new import14.NgControlStatus(this._NgControl_0_10);
    this._text_1 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._appEl_3 = new import2.AppElement(3,(null as any),this,this._anchor_3);
    this._TemplateRef_3_5 = new import16.TemplateRef_(this._appEl_3,viewFactory_AutoCompleteComponent1);
    this._NgIf_3_6 = new import15.NgIf(this._appEl_3.vcRef,this._TemplateRef_3_5);
    this._expr_4 = import7.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_0,'ngModelChange',this.eventHandler(this._handle_ngModelChange_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'keyup',this.eventHandler(this._handle_keyup_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'input',this.eventHandler(this._handle_input_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'blur',this.eventHandler(this._handle_blur_0_3.bind(this)));
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    this._expr_8 = import7.UNINITIALIZED;
    this._expr_9 = import7.UNINITIALIZED;
    this._expr_10 = import7.UNINITIALIZED;
    this._expr_11 = import7.UNINITIALIZED;
    const subscription_0:any = this._NgModel_0_9.update.subscribe(this.eventHandler(this._handle_ngModelChange_0_0.bind(this)));
    this._expr_12 = import7.UNINITIALIZED;
    this._expr_13 = import7.UNINITIALIZED;
    this._expr_14 = import7.UNINITIALIZED;
    this._expr_15 = import7.UNINITIALIZED;
    this._expr_16 = import7.UNINITIALIZED;
    this._expr_17 = import7.UNINITIALIZED;
    this._expr_18 = import7.UNINITIALIZED;
    this.init([],[
      this._el_0,
      this._text_1,
      this._text_2,
      this._anchor_3
    ]
    ,[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    ,[subscription_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.DefaultValueAccessor) && (0 === requestNodeIndex))) { return this._DefaultValueAccessor_0_3; }
    if (((token === import12.RequiredValidator) && (0 === requestNodeIndex))) { return this._RequiredValidator_0_4; }
    if (((token === import12.MinLengthValidator) && (0 === requestNodeIndex))) { return this._MinLengthValidator_0_5; }
    if (((token === import12.MaxLengthValidator) && (0 === requestNodeIndex))) { return this._MaxLengthValidator_0_6; }
    if (((token === import17.NG_VALIDATORS) && (0 === requestNodeIndex))) { return this._NG_VALIDATORS_0_7; }
    if (((token === import18.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_8; }
    if (((token === import13.NgModel) && (0 === requestNodeIndex))) { return this._NgModel_0_9; }
    if (((token === import19.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_10; }
    if (((token === import14.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_11; }
    if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import15.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import7.SimpleChange} = (null as any);
    const currVal_5:any = this.context.queryRequired;
    if (import4.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this._RequiredValidator_0_4.required = currVal_5;
      this._expr_5 = currVal_5;
    }
    changes = (null as any);
    const currVal_7:any = this.context.queryMinLength;
    if (import4.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this._MinLengthValidator_0_5.minlength = currVal_7;
      if ((changes === (null as any))) { (changes = {}); }
      changes['minlength'] = new import7.SimpleChange(this._expr_7,currVal_7);
      this._expr_7 = currVal_7;
    }
    if ((changes !== (null as any))) { this._MinLengthValidator_0_5.ngOnChanges(changes); }
    changes = (null as any);
    const currVal_9:any = this.context.queryMaxLength;
    if (import4.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this._MaxLengthValidator_0_6.maxlength = currVal_9;
      if ((changes === (null as any))) { (changes = {}); }
      changes['maxlength'] = new import7.SimpleChange(this._expr_9,currVal_9);
      this._expr_9 = currVal_9;
    }
    if ((changes !== (null as any))) { this._MaxLengthValidator_0_6.ngOnChanges(changes); }
    changes = (null as any);
    const currVal_11:any = this.context.autocompleteList.query;
    if (import4.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this._NgModel_0_9.model = currVal_11;
      if ((changes === (null as any))) { (changes = {}); }
      changes['model'] = new import7.SimpleChange(this._expr_11,currVal_11);
      this._expr_11 = currVal_11;
    }
    if ((changes !== (null as any))) { this._NgModel_0_9.ngOnChanges(changes); }
    const currVal_18:any = (this.context.autocompleteList.filteredList.length > 0);
    if (import4.checkBinding(throwOnChange,this._expr_18,currVal_18)) {
      this._NgIf_3_6.ngIf = currVal_18;
      this._expr_18 = currVal_18;
    }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_4:any = this.context.placeholderTerm;
    if (import4.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementProperty(this._el_0,'placeholder',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_6:any = (this._RequiredValidator_0_4.required? '': (null as any));
    if (import4.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementAttribute(this._el_0,'required',((currVal_6 == (null as any))? (null as any): currVal_6.toString()));
      this._expr_6 = currVal_6;
    }
    const currVal_8:any = (this._MinLengthValidator_0_5.minlength? this._MinLengthValidator_0_5.minlength: (null as any));
    if (import4.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementAttribute(this._el_0,'minlength',((currVal_8 == (null as any))? (null as any): currVal_8.toString()));
      this._expr_8 = currVal_8;
    }
    const currVal_10:any = (this._MaxLengthValidator_0_6.maxlength? this._MaxLengthValidator_0_6.maxlength: (null as any));
    if (import4.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementAttribute(this._el_0,'maxlength',((currVal_10 == (null as any))? (null as any): currVal_10.toString()));
      this._expr_10 = currVal_10;
    }
    const currVal_12:any = this._NgControlStatus_0_11.ngClassUntouched;
    if (import4.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementClass(this._el_0,'ng-untouched',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this._NgControlStatus_0_11.ngClassTouched;
    if (import4.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementClass(this._el_0,'ng-touched',currVal_13);
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = this._NgControlStatus_0_11.ngClassPristine;
    if (import4.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementClass(this._el_0,'ng-pristine',currVal_14);
      this._expr_14 = currVal_14;
    }
    const currVal_15:any = this._NgControlStatus_0_11.ngClassDirty;
    if (import4.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setElementClass(this._el_0,'ng-dirty',currVal_15);
      this._expr_15 = currVal_15;
    }
    const currVal_16:any = this._NgControlStatus_0_11.ngClassValid;
    if (import4.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      this.renderer.setElementClass(this._el_0,'ng-valid',currVal_16);
      this._expr_16 = currVal_16;
    }
    const currVal_17:any = this._NgControlStatus_0_11.ngClassInvalid;
    if (import4.checkBinding(throwOnChange,this._expr_17,currVal_17)) {
      this.renderer.setElementClass(this._el_0,'ng-invalid',currVal_17);
      this._expr_17 = currVal_17;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._NgModel_0_9.ngOnDestroy();
  }
  private _handle_ngModelChange_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>(this.context.autocompleteList.query = $event)) !== false);
    return (true && pd_0);
  }
  private _handle_keyup_0_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.filter($event,this._NgModel_0_9)) !== false);
    return (true && pd_0);
  }
  private _handle_input_0_2($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._DefaultValueAccessor_0_3.onChange($event.target.value)) !== false);
    return (true && pd_0);
  }
  private _handle_blur_0_3($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._DefaultValueAccessor_0_3.onTouched()) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_AutoCompleteComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.AutoCompleteComponent> {
  if ((renderType_AutoCompleteComponent === (null as any))) { (renderType_AutoCompleteComponent = viewUtils.createRenderComponentType('/Users/evisa/Thematicum/client/app/autocomplete/autocomplete.component.html',0,import9.ViewEncapsulation.None,styles_AutoCompleteComponent,{})); }
  return new _View_AutoCompleteComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_AutoCompleteComponent1 extends import1.AppView<any> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _appEl_2:import2.AppElement;
  _TemplateRef_2_5:any;
  _NgFor_2_6:import20.NgFor;
  _text_3:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_AutoCompleteComponent1,renderType_AutoCompleteComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'ul',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','list-group group-list');
    this.renderer.setElementAttribute(this._el_0,'id','list-group');
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_2 = new import2.AppElement(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import16.TemplateRef_(this._appEl_2,viewFactory_AutoCompleteComponent2);
    this._NgFor_2_6 = new import20.NgFor(this._appEl_2.vcRef,this._TemplateRef_2_5,this.parentInjector.get(import21.IterableDiffers),this.parent.ref);
    this._text_3 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    this.init([].concat([this._el_0]),[
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import20.NgFor) && (2 === requestNodeIndex))) { return this._NgFor_2_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import7.SimpleChange} = (null as any);
    changes = (null as any);
    const currVal_0:any = this.parent.context.autocompleteList.filteredList;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgFor_2_6.ngForOf = currVal_0;
      if ((changes === (null as any))) { (changes = {}); }
      changes['ngForOf'] = new import7.SimpleChange(this._expr_0,currVal_0);
      this._expr_0 = currVal_0;
    }
    if ((changes !== (null as any))) { this._NgFor_2_6.ngOnChanges(changes); }
    if (!throwOnChange) { this._NgFor_2_6.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_AutoCompleteComponent1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_AutoCompleteComponent1(viewUtils,parentInjector,declarationEl);
}
class _View_AutoCompleteComponent2 extends import1.AppView<any> {
  _el_0:any;
  _text_1:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_AutoCompleteComponent2,renderType_AutoCompleteComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'li',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','list-group-item item-list');
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_0,'click',this.eventHandler(this._handle_click_0_0.bind(this)));
    this._expr_3 = import7.UNINITIALIZED;
    this.init([].concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,[disposable_0],[]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = this.context.$implicit.selected;
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'active',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.$implicit.selected;
    if (import4.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_0,'id',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = import4.interpolate(1,'\n        ',this.context.$implicit.name,'\n    ');
    if (import4.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setText(this._text_1,currVal_3);
      this._expr_3 = currVal_3;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.parent.context.addSelectedItem(this.context.$implicit)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_AutoCompleteComponent2(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_AutoCompleteComponent2(viewUtils,parentInjector,declarationEl);
}